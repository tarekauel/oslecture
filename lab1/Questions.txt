Q1.1
The output of the program is more or less always the same. Only the pids change.
The parent prints 42. The child process copied all variables into his own context.
Thus, the two my_value variables are totally independent.

Q2.1
Same observation compared to Q1.1. Even though the variable my_value is shared.
(Assumption: The creation of the thread takes more time and the parent finishes
always first)

Q3.1
Same observation compared to Q1.1.

Q3.2
Pro: asynchronous
Contra: unidirectional

Q4.1
Same observation. Message queues if I need either priorities or 1:n semantics.

Q4.2
If events occur and I want to notify multiple threads and send them this message.

Q5.1
Same observation.

Q5.2
If I do need either a very fast mechanism (copying is avoided) or I don't want to
waste the space that is consumed by the additional copying. (Maybe in embedded
devices)
